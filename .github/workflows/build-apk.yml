name: Android CI (无签名版)

# 触发器：支持手动触发 + 标签推送触发（可根据需要保留/删除）
on:
  workflow_dispatch:  # 手动触发（核心）
  push:
    tags:
      - '*'  # 可选：保留标签推送自动触发，不需要可删除这部分

jobs:
  build:
    runs-on: ubuntu-latest  # 使用 Ubuntu 系统

    steps:
      # 步骤 1：检出代码并设置权限
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: .
      - name: Set gradlew executable
        working-directory: ./android
        run: |
          ls -la
          chmod +x gradlew
          ls -la gradlew
      # 安装Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      # 安装npm依赖
      - name: Install npm dependencies
        run: |
          npm install
          cd android && ./gradlew --version

      # 步骤 2：配置 Android 构建环境
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 安装 Android SDK 和构建工具
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          build-tools-version: "34.0.0"
          platform-version: "34"
          cmake-version: "3.22.1"
          ndk-version: "25.2.9519653"

      # 步骤 3：构建未签名的 Release APK
      - name: Build Unsigned APK
        working-directory: ./android
        run: |
          # 验证环境
          echo "=== 环境检查 ==="
          ls -la
          ./gradlew --version
          
          # 准备构建
          echo "=== 准备构建 ==="
          chmod +x gradlew
          
          # 执行构建（增加调试信息）
          echo "=== 开始构建 ==="
          ./gradlew clean
          ./gradlew assembleRelease --no-daemon --stacktrace --info --scan || (find . -name "*.log" -type f -print -exec cat {} \; && exit 1)
          
          # 验证构建结果
          echo "=== 验证构建结果 ==="
          if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "APK生成成功！"
            ls -la app/build/outputs/apk/release/
          else
            echo "::error::APK生成失败！"
            find . -name "*.log" -type f -print -exec cat {} \;
            exit 1
          fi

      # 步骤 4：上传 APK 到 GitHub Actions 工件（临时下载用）
      - name: Upload Unsigned APK
        uses: actions/upload-artifact@v4  # 最新版上传工件动作
        with:
          name: unsigned-app-release  # 工件名称（可自定义）
          path: app/build/outputs/apk/release/app-release-unsigned.apk  # 未签名 APK 路径
          retention-days: 30  # 工件保留时间（默认 90 天，可按需调整）

      # 步骤 5（可选）：创建 GitHub Release 并上传 APK
      # （如果不需要自动创建 Release，可删除步骤 5 和 6）
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 自动获取仓库 Token，无需手动配置
        with:
          tag_name: ${{ github.ref_name }}  # 标签名（推送标签时自动获取，如 v1.0.0）
          release_name: Release ${{ github.ref_name }}  # Release 名称
          draft: false
          prerelease: false

      # 步骤 6（可选）：上传 APK 到 Release 附件
      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/release/app-release-unsigned.apk  # 未签名 APK 路径
          asset_name: App-unsigned.apk  # 附件名称（注明“未签名”避免误解）
          asset_content_type: application/vnd.android.package-archive